pipeline {
    agent any
    tools {nodejs "nodejs"}

    environment { 
        RECIPIENT = "mincelichan@gmail.com" 
    }

    stages {
        stage('Run Backend Tests') {
            steps {
                script {
                    try {
                        dir('backend') {
                            bat """
                            echo Running backend tests...
                            npm install && npm run test
                            """
                        }
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error("Backend tests failed. Exiting pipeline.")
                    }
                }
            }
        }

        stage('Run Frontend Tests') {
            steps {
                script {
                    try {
                        dir('frontend') {
                            bat """
                            echo Running frontend tests...
                            npm install && npm run test
                            """
                        }
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error("Frontend tests failed. Exiting pipeline.")
                    }
                }
            }
        }

        stage('Run Docker Containers in Parallel - Backend') {
            steps {
                script {
                    try {
                        // Running both tasks in parallel: Model and Backend
                        parallel (
                            "Run Model Container": {
                                dir('model') {
                                    bat """
                                    docker-compose down
                                    echo SERP_API_KEY=<YOUR_SERPAPI_KEY> > .env
                                    echo GROQ_API_KEY=<YOUR_GROQ_APIKEY> >> .env
                                    echo YOUTUBE_API_KEY=<YOUR_YOUTUBE_V3_APIKEY> >> .env
                                    echo HUGGINGFACE_API_KEY=<YOUR_HUGGINGFACE_APIKEY> >> .env
                                    docker-compose up -d --build
                                    """
                                }
                            },
                            "Run Backend Container": {
                                dir('backend') {
                                    bat """
                                    docker-compose down
                                    echo MONGO_URI=<YOUR_MONGO_URI> > .env
                                    echo PORT=5000 >> .env
                                    echo JWT_SECRET='BuddyBrownie' >> .env
                                    docker-compose up -d --build
                                    """
                                }
                            }
                        )
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }

        stage('Configure Frontend and Run') {
            steps {
                script {
                    dir('frontend') {
                        bat """
                        docker-compose down
                        echo VITE_GOOGLE_CLIENT_ID=<ADD_YOUR_VITE_GOOGLE_CLIENT_ID> > .env
                        docker-compose up --build
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Build succeeded, sending email..."
            emailext (
                subject: "Jenkins Build SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: """<p>The build was successful.</p>
                         <p>Job: ${env.JOB_NAME}</p>
                         <p>Build: <a href='${env.BUILD_URL}'>${env.BUILD_NUMBER}</a></p>""",
                to: "${RECIPIENT}"
            )
        }
        failure {
            echo "Build failed, sending email..."
            emailext (
                subject: "Jenkins Build FAILURE: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: """<p>The build failed.</p>
                         <p>Job: ${env.JOB_NAME}</p>
                         <p>Build: <a href='${env.BUILD_URL}'>${env.BUILD_NUMBER}</a></p>
                         <p>Reason: Test cases failed or other issues.</p>""",
                to: "${RECIPIENT}"
            )
        }
    }
}
